
作者：代兴   503268771@qq.com
4K纸。  约450页。

============================================

1.准备工作
	1.1开发环境    4.5页
		1.1.1最小化开发环境
		1.1.2用hello程序测试开发环境
	1.2 学习技巧    1页
2.CPU和内存
	2.1 CPU         2页
		2.1.1 CPU的组成部分
		2.1.2 用命令查看CPU信息
	2.2 虚拟内存    6页
		2.2.1内存地址与页表
		2.2.2模拟页表功能
	2.3 进程的内存布局   8页
		2.3.1内存布局的组成部分
		2.3.2用命令查看进程的内存布局
		2.3.3用代码分析进程的内存布局
	2.4字节顺序      9页
		2.4.1字节顺序的含义
		2.4.2字符串的字节顺序
		2.4.3整数的字节顺序
		2.4.4小端顺序的优点
		2.4.5用字符串转数字
		2.4.6用大端实现整数读写
3.汇编基础
	3.1汇编语法分类   6.5页
		3.1.1语法分类的相同点和不同点
		3.1.2用代码比较语法分类的差异
	3.2汇编文件组成   6页
		3.2.1用代码说明汇编文件的组成部分
		3.2.2自定义汇编文件的各个部分
		3.2.3绝对寻址与相对寻址
	3.3寄存器分类     4页
		3.3.1整数寄存器
		3.3.2浮点数寄存器
		3.3.3栈寄存器
		3.3.4指令指针寄存器
		3.3.5状态寄存器
	3.4汇编数据类型   4页
		3.4.1整数类型
		3.4.2浮点数类型
		3.4.3数组类型
		3.4.4字符串类型
		3.4.5用代码分析数据类型
	3.5汇编指令命名规则    1.5页
4.汇编指令
	4.1移动指令     5页
		4.1.1整数移动指令
		4.1.2浮点数移动指令
	4.2寻址指令     3页
		4.2.1绝对寻址
		4.2.2相对寻址
	4.3整数加法指令   7页
		4.3.1指令说明
		4.3.2简单的加法
		4.3.3复杂的加法(位数、进位、清零、负数等，下同)
	4.4整数减法指令   7页
		4.4.1指令说明
		4.4.2简单的减法
		4.4.3复杂的减法
	4.5整数乘法指令   9页
		4.5.1指令说明
		4.5.2简单的乘法
		4.5.3复杂的乘法
	4.6整数除法指令   7页
		4.6.1指令说明
		4.6.2简单的除法
		4.6.3复杂的除法
	4.7浮点数加法指令   2.5页
		4.7.1指令说明
		4.7.2简单的加法
	4.8浮点数减法指令   2页
		4.8.1指令说明
		4.8.2简单的减法
	4.9浮点数乘法指令   2页
		4.9.1指令说明
		4.9.2简单的乘法
	4.10浮点数除法指令   2页
		4.10.1指令说明
		4.10.2简单的除法
	4.11整数转换指令     6页
		4.11.1低位转高位，使用零扩展、符号扩展
		4.11.2高位转低位，使用mov指令截取
		4.11.3用汇编代码分析
	4.12浮点数转换指令   4页
		4.12.1指令说明
		4.12.2用汇编代码分析
	4.13跨寄存器扩展指令   3页
		4.13.1指令说明
		4.13.2用汇编代码分析
	4.14自增指令       3页
		4.14.1指令说明
		4.14.2用汇编代码分析
	4.15自减指令      3页
		4.15.1指令说明
		4.15.2用汇编代码分析
	4.16左移指令      5页
		4.16.1指令说明
		4.16.2用汇编代码分析
	4.17右移指令      5页
		4.17.1指令说明
		4.17.2用汇编代码分析
	4.18位与指令     3页
		4.18.1指令说明
		4.18.2用汇编代码分析
	4.19位或指令     3页
		4.19.1指令说明
		4.19.2用汇编代码分析
	4.20位取反指令   3页
		4.20.1指令说明
		4.20.2用汇编代码分析
	4.21位异或指令   4页
		4.21.1指令说明
		4.21.2用汇编代码分析
	4.22整数比较指令   7页
		4.22.1指令说明
		4.22.2查看多种比较指令
		4.22.3有符号整数的比较
		无符号整数的比较
	4.23浮点数比较指令   4页
		4.23.1指令说明
		4.23.2查看多种比较指令
		4.23.3有符号浮点数的比较
	4.24跳转指令     8.5页
		4.24.1指令说明
		4.24.2用跳转指令实现乱序输出
		4.24.3用跳转指令实现循环累加
		4.24.4用跳转指令实现规则匹配
	4.25 CAS指令     6页
		4.25.1 指令说明
		4.25.2cmpxchg指令
		4.25.3xchg指令
	4.26 函数指令     2.5页
		4.26.1指令说明
		4.26.2用汇编代码分析
	4.27内联汇编      5页
		4.27.1内联汇编的定义
		4.27.2内联汇编的输入和输出
		4.27.3用内联汇编实现2个浮点数相加
	4.28 综合，整数计算器     6页
		4.28.1整数计算器的功能
		4.28.2整数计算器的实现
	4.29 综合，浮点数计算器    6页
		4.29.1浮点数计算器的功能
		4.29.2浮点数计算器的实现
	4.30综合，字符串比较器    5页
		4.30.1字符串比较器的功能
		4.30.2字符串比较器的实现
5.编译和运行
	5.1 ELF文件格式     10.5页
		5.1.1 ELF的含义和组成
		5.1.2 ELF在linux源码的定义 
		5.1.3 用C和汇编分析ELF格式
	5.2 静态库      5.5页
		5.2.1 静态库的含义
		5.2.2用C程序分析静态库
	5.3 动态库     24.5页
		5.3.1 动态库的本质
		5.3.2 用C程序简单模拟动态库
		5.3.3 分析复杂的动态库
		5.3.4 符号的代理关系图
		5.3.5 动态库的符号和代理
		5.3.6 动态库的函数shared_dance()
		5.3.7 动态库的GOT代理
		5.3.8 main文件的符号和代理
		5.3.9 main文件的函数main_print()
		5.3.10 动态库的PLT代理
	5.4 LDS脚本     6页
		5.4.1 LDS脚本的含义
		5.4.2 用C程序分析LDS脚本
	5.5 反汇编       4页
		5.5.1 反汇编的含义
		5.5.2 用C和汇编分析反汇编
6.函数
	6.1 函数的结构    2页
		6.1.1 函数的组成部分
		6.1.2 用C和汇编分析函数结构
	6.2 函数名     3页
		6.2.1函数名的规则
		6.2.2用C和C++对比函数名
	6.3函数体    4页
		6.3.1函数体的规则
		6.3.2比较多个函数有不同的函数体
		6.3.3比较内联函数和普通函数
	6.4 函数的入参   6页
		6.4.1入参的规则
		6.4.2用C和汇编分析入参数量、整数入参、浮点数入参
		6.4.3用汇编实现入参使用自定义的寄存器
		6.4.4用汇编实现只使用函数栈传递入参
	6.5 函数的返回值    6页
		6.5.1返回值的规则
		6.5.2用C和汇编分析简单的返回值
		6.5.3用C和汇编分析复杂的返回值
		6.5.4用汇编实现返回值使用自定义的函数栈
	6.6 值传递与引用传递     10.5页
		6.6.1值传递与引用传递的含义
		6.6.2用C和汇编分析数字变量的传递
		6.6.3用C和汇编分析struct变量的传递
		6.6.4用C和汇编分析只读场景的数字变量
	6.7 函数栈       19页
		6.7.1函数栈、栈寄存器、栈帧
		6.7.2用汇编分析栈帧的结构
		6.7.3顺序调用和嵌套调用的实现
		6.7.4用C和汇编分析函数调用的深度
		6.7.5用C分析局部变量的地址顺序
		6.7.6用C分析struct属性的地址顺序
		6.7.7栈大小与栈溢出
		6.7.8用汇编分析省略函数栈操作
7.程序的基础组件
	7.1 结构体struct    18页
		7.1.1struct的本质是一块连续的内存
		7.1.2用C和汇编分析struct属性的内存顺序和内存地址
		7.1.3用C和汇编分析用地址遍历struct的属性
		7.1.4用C和汇编分析父子结构与首地址
		7.1.5用C和汇编分析属性偏移与属性读写
	7.2 数组array      12页
		7.2.1数组的本质是一块连续的内存
		7.2.2用C和汇编分析数字型数组
		7.2.3用C和汇编分析struct型数组
		7.2.4用C和汇编分析值传递与引用传递
		7.2.5用C和汇编分析数组越界访问
	7.3 指针pointer     6.5页
		7.3.1指针的本质是内存地址
		7.3.2用C和汇编查看多种类型的指针
		7.3.3用C和汇编实现用指针遍历内存
		7.3.4用汇编实现指针拆分整数
	7.4 循环与递归     5.5页
		7.4.1循环与递归的区别
		7.4.2用C分析循环与递归的差异
		7.4.3递归的优点和适用场景
	7.5 缓存cache     8页
		7.5.1缓存的含义
		7.5.2使用数组缓存加快数字计算
		7.5.3多级缓存的协作
	7.6 索引index    7.5页
		7.6.1 索引的含义
		7.6.2 mysql的B+树索引
		7.6.3 用Java生成2D地图的点线索引
	7.7 C语言实现面向对象   7.5页
		7.7.1面向对象的含义
		7.7.2使用struct和指针实现面向对象
		7.7.3用C分析函数集合
	7.8 C语言高效的秘密    4.5页
		7.8.1从汇编角度总结C语言的高效(数据类型、变量定义、指令运算、指针操作等)
		7.8.2用C和汇编分析高效的细节
8.并发和线程
	8.1 并发写与CAS指令    5.5页
		8.1.1 并发写需要CAS指令保证原子性
		8.1.2 用C分析多线程累加1个整数
		8.1.3 Linux源码中的CAS指令
	8.2 非阻塞锁与CAS指令    4页
		8.2.1非阻塞锁的含义
		8.2.2从glibc源码查看非阻塞锁的定义
		8.2.3用C分析非阻塞锁
	8.3 阻塞锁与CAS指令    7页
		8.3.1阻塞锁的含义
		8.3.2从glibc源码查看阻塞锁的定义
		8.3.3用C和汇编分析阻塞锁的使用
	8.4 伪共享      5页
		8.4.1 伪共享的含义
		8.4.2 避免伪共享的方法
		8.4.3 用C分析避免伪共享的效果
	8.5 线程的原理     14页
		8.5.1 线程的含义(定义、状态、同步、栈、调度)
		8.5.2 linux源码中的线程定义
		8.5.3 线程同步：多个线程交替输出序号
		8.5.4 用C分析CPU密集型和IO密集型
	8.6 协程的原理     9页
		8.6.1 协程的含义(定义、核心、实现方式、示意图等)
		8.6.2 用C和汇编实现完整的协程功能
9.无锁编程
	9.1 CPU隔离    8页
		9.1.1 percpu的含义和示意图
		9.1.2 linux源码中的percpu
		9.1.3 使用C和汇编实现自定义的percpu
	9.2 线程隔离   4.5页
		9.2.1 threadlocal的含义和示意图
		9.2.2 Java语言的threadlocal
		9.2.3 使用C实现自定义的threadlocal
	9.3 原子操作   4页
		9.3.1 atomic的含义
		9.3.2 使用C和汇编实现自定义的atomic
	9.4 环形队列   5.5页
		9.4.1 ringbuffer的含义和示意图
		9.4.2 使用C和CAS指令实现自定义的ringbuffer
10.指令乱序与内存屏障
	10.1指令乱序    6页
		10.1.1 指令乱序的分类(编译期、运行期)
		10.1.2 用C和汇编直观理解指令乱序
		10.1.3 用C和汇编分析load和store
		10.1.4 用C和汇编分析避免指令乱序的方法
	10.2内存屏障    10页
		10.2.1 内存屏障指令
		10.2.2用C和汇编分析运行期指令乱序
		10.2.3 用内存屏障指令解决运行期指令乱序
	10.3 Linux源码中的内存屏障    3页
		10.3.1 内存屏障的定义
		10.3.2 内存屏障的使用举例
	10.4 C语言的volatile关键字    5页
		10.4.1 C语言的volatile关键字说明
		10.4.2 用C和汇编分析没有使用volatile的场景
		10.4.3 用C和汇编分析使用volatile的场景
	10.5 Java语言的volatile关键字    5页
		10.5. Java语言的volatile关键字说明
		10.5.2 查看JVM源码中的volatile
		10.5.3 查看JDK源码中的volatile
		10.5.4 用Java分析volatile的影响
